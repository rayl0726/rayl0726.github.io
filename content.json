{"meta":{"title":"Hexo","subtitle":"","description":"","author":"ChelseaRay","url":"http://rayl0726.github.io","root":"/"},"pages":[{"title":"ChelseaRay","date":"2020-06-20T12:36:59.002Z","updated":"2020-06-20T12:36:59.002Z","comments":true,"path":"about/index.html","permalink":"http://rayl0726.github.io/about/index.html","excerpt":"","text":"关于我 北京航空航天大学 本科 java开发程序猿 英雄联盟渣渣选手 高达狂热粉 切尔西死忠 KTV级别“灵魂歌手” 说明小站的建立单纯处于喜欢，想要记录一些学习，生活中的琐事。如果你看到，欢迎你～～"},{"title":"大佬们","date":"2020-06-19T09:21:10.600Z","updated":"2020-06-19T09:21:10.600Z","comments":false,"path":"friends/index.html","permalink":"http://rayl0726.github.io/friends/index.html","excerpt":"","text":""},{"title":"所有分类","date":"2020-06-19T09:21:12.312Z","updated":"2020-06-19T09:21:12.312Z","comments":true,"path":"categories/index.html","permalink":"http://rayl0726.github.io/categories/index.html","excerpt":"","text":""},{"title":"","date":"2020-06-19T03:03:46.148Z","updated":"2020-06-19T03:03:46.148Z","comments":true,"path":"mylist/index.html","permalink":"http://rayl0726.github.io/mylist/index.html","excerpt":"","text":""},{"title":"所有标签","date":"2020-06-19T08:53:39.200Z","updated":"2020-06-19T08:53:39.200Z","comments":true,"path":"tags/index.html","permalink":"http://rayl0726.github.io/tags/index.html","excerpt":"","text":""},{"title":"","date":"2020-06-19T02:21:10.250Z","updated":"2020-06-19T02:21:10.250Z","comments":true,"path":"categories/tech/index.html","permalink":"http://rayl0726.github.io/categories/tech/index.html","excerpt":"","text":"Category: tech - Hexo function setLoadingBarProgress(num) { document.getElementById('loading-bar').style.width=num+\"%\"; } ChelseaRay'blog 首页 分类 标签 归档 友链 关于 首页 分类 标签 归档 友链 关于 setLoadingBarProgress(40); java并发总结 ChelseaRay tech 发布于：Jun 7, 2020 一 概念： 共享的：变量可以被多个线程访问， 可变的：变量在生命周期内可以发生变化， 原子性：复合操作保证要么都完成，要么都不完成， 阅读全文 Hexo 文章分类 tech(1) 热门标签 concurrent java Blog content follows the Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0) License Use Volantis as theme, total visits times Copyright © 2017-2020 Mr. X setLoadingBarProgress(80); setLoadingBarProgress(60); var SEARCH_SERVICE = \"hexo\" || \"hexo\"; var ROOT = \"/\" || \"/\"; if (!ROOT.endsWith('/')) ROOT += '/'; $(function() { ScrollReveal().reveal('.l_main .reveal', { distance: '8px', duration: '800', interval: '100', scale: '1' }); }); $(function() { Waves.attach('.flat-btn', ['waves-button']); Waves.attach('.float-btn', ['waves-button', 'waves-float']); Waves.attach('.float-btn-light', ['waves-button', 'waves-float', 'waves-light']); Waves.attach('.flat-box', ['waves-block']); Waves.attach('.float-box', ['waves-block', 'waves-float']); Waves.attach('.waves-image'); Waves.init(); }); $(function(){ var imgs=[\"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg\"]; if ('true' == 'true') { function shuffle(arr){ /*From countercurrent-time*/ var n = arr.length; while(n--) { var index = Math.floor(Math.random() * n); var temp = arr[index]; arr[index] = arr[n]; arr[n] = temp; } } shuffle(imgs); } if ('.cover') { $('.cover').backstretch( imgs, { duration: \"20000\", fade: \"1500\" }); } else { $.backstretch( imgs, { duration: \"20000\", fade: \"1500\" }); } }); function wait(callback, seconds) { var timelag = null; timelag = window.setTimeout(callback, seconds); } !function (e, t, a) { var initCopyCode = function(){ var copyHtml = ''; copyHtml += ''; copyHtml += 'COPY'; copyHtml += ''; $(\".highlight .code pre\").before(copyHtml); $(\".article pre code\").before(copyHtml); var clipboard = new ClipboardJS('.btn-copy', { target: function(trigger) { return trigger.nextElementSibling; } }); clipboard.on('success', function(e) { let $btn = $(e.trigger); $btn.addClass('copied'); let $icon = $($btn.find('i')); $icon.removeClass('fa-copy'); $icon.addClass('fa-check-circle'); let $span = $($btn.find('span')); $span[0].innerText = 'COPIED'; wait(function () { // 等待两秒钟后恢复 $icon.removeClass('fa-check-circle'); $icon.addClass('fa-copy'); $span[0].innerText = 'COPY'; }, 2000); }); clipboard.on('error', function(e) { e.clearSelection(); let $btn = $(e.trigger); $btn.addClass('copy-failed'); let $icon = $($btn.find('i')); $icon.removeClass('fa-copy'); $icon.addClass('fa-times-circle'); let $span = $($btn.find('span')); $span[0].innerText = 'COPY FAILED'; wait(function () { // 等待两秒钟后恢复 $icon.removeClass('fa-times-circle'); $icon.addClass('fa-copy'); $span[0].innerText = 'COPY'; }, 2000); }); } initCopyCode(); }(window, document); function pjax_fancybox() { $(\".article-entry\").find(\"img\").not('.inline').not('a img').each(function () { //渲染 fancybox var element = document.createElement(\"a\"); // a 标签 $(element).attr(\"pjax-fancybox\", \"\"); // 过滤 pjax $(element).attr(\"href\", $(this).attr(\"src\")); if ($(this).attr(\"data-original\")) { $(element).attr(\"href\", $(this).attr(\"data-original\")); } $(element).attr(\"data-fancybox\", \"images\"); var caption = \"\"; // 描述信息 if ($(this).attr('alt')) { // 标准 markdown 描述信息 $(element).attr('data-caption', $(this).attr('alt')); caption = $(this).attr('alt'); } var div = document.createElement(\"div\"); $(div).addClass(\"fancybox\"); $(this).wrap(div); // 最外层套 div ，其实主要作用还是 class 样式 var span = document.createElement(\"span\"); $(span).addClass(\"image-caption\"); $(span).text(caption); // 加描述 $(this).after(span); // 再套一层描述 $(this).wrap(element); // 最后套 a 标签 }) $(\".article-entry\").find(\"img\").fancybox({ selector: '[data-fancybox=\"images\"]', hash: false, loop: false, closeClick: true, helpers: { overlay: {closeClick: true} }, buttons: [ \"zoom\", \"close\" ] }); }; $(function () { pjax_fancybox(); }); setLoadingBarProgress(100);"},{"title":"","date":"2020-06-19T02:21:10.250Z","updated":"2020-06-19T02:21:10.250Z","comments":true,"path":"tags/concurrent/index.html","permalink":"http://rayl0726.github.io/tags/concurrent/index.html","excerpt":"","text":"Tag: concurrent - Hexo function setLoadingBarProgress(num) { document.getElementById('loading-bar').style.width=num+\"%\"; } ChelseaRay'blog 首页 分类 标签 归档 友链 关于 首页 分类 标签 归档 友链 关于 setLoadingBarProgress(40); java并发总结 ChelseaRay tech 发布于：Jun 7, 2020 一 概念： 共享的：变量可以被多个线程访问， 可变的：变量在生命周期内可以发生变化， 原子性：复合操作保证要么都完成，要么都不完成， 阅读全文 Hexo 文章分类 tech(1) 热门标签 concurrent java Blog content follows the Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0) License Use Volantis as theme, total visits times Copyright © 2017-2020 Mr. X setLoadingBarProgress(80); setLoadingBarProgress(60); var SEARCH_SERVICE = \"hexo\" || \"hexo\"; var ROOT = \"/\" || \"/\"; if (!ROOT.endsWith('/')) ROOT += '/'; $(function() { ScrollReveal().reveal('.l_main .reveal', { distance: '8px', duration: '800', interval: '100', scale: '1' }); }); $(function() { Waves.attach('.flat-btn', ['waves-button']); Waves.attach('.float-btn', ['waves-button', 'waves-float']); Waves.attach('.float-btn-light', ['waves-button', 'waves-float', 'waves-light']); Waves.attach('.flat-box', ['waves-block']); Waves.attach('.float-box', ['waves-block', 'waves-float']); Waves.attach('.waves-image'); Waves.init(); }); $(function(){ var imgs=[\"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg\"]; if ('true' == 'true') { function shuffle(arr){ /*From countercurrent-time*/ var n = arr.length; while(n--) { var index = Math.floor(Math.random() * n); var temp = arr[index]; arr[index] = arr[n]; arr[n] = temp; } } shuffle(imgs); } if ('.cover') { $('.cover').backstretch( imgs, { duration: \"20000\", fade: \"1500\" }); } else { $.backstretch( imgs, { duration: \"20000\", fade: \"1500\" }); } }); function wait(callback, seconds) { var timelag = null; timelag = window.setTimeout(callback, seconds); } !function (e, t, a) { var initCopyCode = function(){ var copyHtml = ''; copyHtml += ''; copyHtml += 'COPY'; copyHtml += ''; $(\".highlight .code pre\").before(copyHtml); $(\".article pre code\").before(copyHtml); var clipboard = new ClipboardJS('.btn-copy', { target: function(trigger) { return trigger.nextElementSibling; } }); clipboard.on('success', function(e) { let $btn = $(e.trigger); $btn.addClass('copied'); let $icon = $($btn.find('i')); $icon.removeClass('fa-copy'); $icon.addClass('fa-check-circle'); let $span = $($btn.find('span')); $span[0].innerText = 'COPIED'; wait(function () { // 等待两秒钟后恢复 $icon.removeClass('fa-check-circle'); $icon.addClass('fa-copy'); $span[0].innerText = 'COPY'; }, 2000); }); clipboard.on('error', function(e) { e.clearSelection(); let $btn = $(e.trigger); $btn.addClass('copy-failed'); let $icon = $($btn.find('i')); $icon.removeClass('fa-copy'); $icon.addClass('fa-times-circle'); let $span = $($btn.find('span')); $span[0].innerText = 'COPY FAILED'; wait(function () { // 等待两秒钟后恢复 $icon.removeClass('fa-times-circle'); $icon.addClass('fa-copy'); $span[0].innerText = 'COPY'; }, 2000); }); } initCopyCode(); }(window, document); function pjax_fancybox() { $(\".article-entry\").find(\"img\").not('.inline').not('a img').each(function () { //渲染 fancybox var element = document.createElement(\"a\"); // a 标签 $(element).attr(\"pjax-fancybox\", \"\"); // 过滤 pjax $(element).attr(\"href\", $(this).attr(\"src\")); if ($(this).attr(\"data-original\")) { $(element).attr(\"href\", $(this).attr(\"data-original\")); } $(element).attr(\"data-fancybox\", \"images\"); var caption = \"\"; // 描述信息 if ($(this).attr('alt')) { // 标准 markdown 描述信息 $(element).attr('data-caption', $(this).attr('alt')); caption = $(this).attr('alt'); } var div = document.createElement(\"div\"); $(div).addClass(\"fancybox\"); $(this).wrap(div); // 最外层套 div ，其实主要作用还是 class 样式 var span = document.createElement(\"span\"); $(span).addClass(\"image-caption\"); $(span).text(caption); // 加描述 $(this).after(span); // 再套一层描述 $(this).wrap(element); // 最后套 a 标签 }) $(\".article-entry\").find(\"img\").fancybox({ selector: '[data-fancybox=\"images\"]', hash: false, loop: false, closeClick: true, helpers: { overlay: {closeClick: true} }, buttons: [ \"zoom\", \"close\" ] }); }; $(function () { pjax_fancybox(); }); setLoadingBarProgress(100);"},{"title":"","date":"2020-06-19T02:21:10.250Z","updated":"2020-06-19T02:21:10.250Z","comments":true,"path":"tags/java/index.html","permalink":"http://rayl0726.github.io/tags/java/index.html","excerpt":"","text":"Tag: java - Hexo function setLoadingBarProgress(num) { document.getElementById('loading-bar').style.width=num+\"%\"; } ChelseaRay'blog 首页 分类 标签 归档 友链 关于 首页 分类 标签 归档 友链 关于 setLoadingBarProgress(40); java并发总结 ChelseaRay tech 发布于：Jun 7, 2020 一 概念： 共享的：变量可以被多个线程访问， 可变的：变量在生命周期内可以发生变化， 原子性：复合操作保证要么都完成，要么都不完成， 阅读全文 Hexo 文章分类 tech(1) 热门标签 concurrent java Blog content follows the Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0) License Use Volantis as theme, total visits times Copyright © 2017-2020 Mr. X setLoadingBarProgress(80); setLoadingBarProgress(60); var SEARCH_SERVICE = \"hexo\" || \"hexo\"; var ROOT = \"/\" || \"/\"; if (!ROOT.endsWith('/')) ROOT += '/'; $(function() { ScrollReveal().reveal('.l_main .reveal', { distance: '8px', duration: '800', interval: '100', scale: '1' }); }); $(function() { Waves.attach('.flat-btn', ['waves-button']); Waves.attach('.float-btn', ['waves-button', 'waves-float']); Waves.attach('.float-btn-light', ['waves-button', 'waves-float', 'waves-light']); Waves.attach('.flat-box', ['waves-block']); Waves.attach('.float-box', ['waves-block', 'waves-float']); Waves.attach('.waves-image'); Waves.init(); }); $(function(){ var imgs=[\"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg\"]; if ('true' == 'true') { function shuffle(arr){ /*From countercurrent-time*/ var n = arr.length; while(n--) { var index = Math.floor(Math.random() * n); var temp = arr[index]; arr[index] = arr[n]; arr[n] = temp; } } shuffle(imgs); } if ('.cover') { $('.cover').backstretch( imgs, { duration: \"20000\", fade: \"1500\" }); } else { $.backstretch( imgs, { duration: \"20000\", fade: \"1500\" }); } }); function wait(callback, seconds) { var timelag = null; timelag = window.setTimeout(callback, seconds); } !function (e, t, a) { var initCopyCode = function(){ var copyHtml = ''; copyHtml += ''; copyHtml += 'COPY'; copyHtml += ''; $(\".highlight .code pre\").before(copyHtml); $(\".article pre code\").before(copyHtml); var clipboard = new ClipboardJS('.btn-copy', { target: function(trigger) { return trigger.nextElementSibling; } }); clipboard.on('success', function(e) { let $btn = $(e.trigger); $btn.addClass('copied'); let $icon = $($btn.find('i')); $icon.removeClass('fa-copy'); $icon.addClass('fa-check-circle'); let $span = $($btn.find('span')); $span[0].innerText = 'COPIED'; wait(function () { // 等待两秒钟后恢复 $icon.removeClass('fa-check-circle'); $icon.addClass('fa-copy'); $span[0].innerText = 'COPY'; }, 2000); }); clipboard.on('error', function(e) { e.clearSelection(); let $btn = $(e.trigger); $btn.addClass('copy-failed'); let $icon = $($btn.find('i')); $icon.removeClass('fa-copy'); $icon.addClass('fa-times-circle'); let $span = $($btn.find('span')); $span[0].innerText = 'COPY FAILED'; wait(function () { // 等待两秒钟后恢复 $icon.removeClass('fa-times-circle'); $icon.addClass('fa-copy'); $span[0].innerText = 'COPY'; }, 2000); }); } initCopyCode(); }(window, document); function pjax_fancybox() { $(\".article-entry\").find(\"img\").not('.inline').not('a img').each(function () { //渲染 fancybox var element = document.createElement(\"a\"); // a 标签 $(element).attr(\"pjax-fancybox\", \"\"); // 过滤 pjax $(element).attr(\"href\", $(this).attr(\"src\")); if ($(this).attr(\"data-original\")) { $(element).attr(\"href\", $(this).attr(\"data-original\")); } $(element).attr(\"data-fancybox\", \"images\"); var caption = \"\"; // 描述信息 if ($(this).attr('alt')) { // 标准 markdown 描述信息 $(element).attr('data-caption', $(this).attr('alt')); caption = $(this).attr('alt'); } var div = document.createElement(\"div\"); $(div).addClass(\"fancybox\"); $(this).wrap(div); // 最外层套 div ，其实主要作用还是 class 样式 var span = document.createElement(\"span\"); $(span).addClass(\"image-caption\"); $(span).text(caption); // 加描述 $(this).after(span); // 再套一层描述 $(this).wrap(element); // 最后套 a 标签 }) $(\".article-entry\").find(\"img\").fancybox({ selector: '[data-fancybox=\"images\"]', hash: false, loop: false, closeClick: true, helpers: { overlay: {closeClick: true} }, buttons: [ \"zoom\", \"close\" ] }); }; $(function () { pjax_fancybox(); }); setLoadingBarProgress(100);"}],"posts":[{"title":"java并发总结","slug":"java-concurrent","date":"2020-06-06T16:00:00.000Z","updated":"2020-06-19T08:37:04.600Z","comments":true,"path":"2020/06/07/java-concurrent/","link":"","permalink":"http://rayl0726.github.io/2020/06/07/java-concurrent/","excerpt":"一 概念： 共享的：变量可以被多个线程访问， 可变的：变量在生命周期内可以发生变化， 原子性：复合操作保证要么都完成，要么都不完成，","text":"一 概念： 共享的：变量可以被多个线程访问， 可变的：变量在生命周期内可以发生变化， 原子性：复合操作保证要么都完成，要么都不完成， 竞态条件：不正确的执行顺序出现的不正确的执行结果，两个线程分别对一个数据操作，结果操作的顺序没有保证，会导致结果不正确， 先检查后执行（check-then-act）：先要判断变量a是否为1，再操作另外一个变量b，在这期间可能会有另外一个线程提前改变了变量b的值，这样导致数据不一致；其他异常情况：数据覆盖，文件破坏等出现的情况：延迟初始化(将对象的初始化操作推迟到实际使用的时候才进行，并确保只被初始化一次），在初始化之前这段时间可能会造成判断条件不一致的情况。 内置锁（监视器锁）：每个java对象都可以作为一个实现同步的锁， 同步代码块：包含一个作为锁的对象引用，还有一个作为由这个所保护的代码块；线程在进入同步代码块之前会自动获得锁，并在退出同步代码块的时候自动释放锁；每次只有一个线程执行内置锁保护的代码，所以能保证代码块内的原子性 重入：某个线程试图获得一个已经由他持有的锁时，因为本身已经持有，还有一种情况jvm虚拟机做到了锁消除，不用再重新获取； 可见性（内存可见性）：读操作和写操作在不同的线程中执行的时候，为了确保不同线程写入内存的状态都能被各个线程看到，所以需要有同步的机制，在主内存上同步数据的一致； 重排序：编译器可以不按照代码的顺序编译指令，处理器也能不按照顺序执行指令，这是由重排序导致数据不正确；编译器会把变量直接存在寄存器中，处理器中的缓存数据其他处理器不可见，这个是由于不可见性导致数据不一致。 加锁和可见性：当线程a执行同步代码块中的操作后，释放锁，数据会清空缓存，更新主内存，这样下一次的线程b执行同步代码块时，会从内存中读取到同步的数据，保证了数据的可见性； volatile：被volatile声明的变量，编译器不会把该变量进行重排序，变量不会缓存在寄存器或者处理器的本地缓存，这样保证了变量的可见性，读取该变量的时候总是返回最新的值。用法：若把某个变量用作标记，将其声明为volatile类型，保证多线程修改的时候都可见，防止出现多线程操作后数据不一直的问题和加锁的区别：加锁能够保证原子性和可见性，而volatile只能保证可见性。 发布：指变量能够被当前作用域之外的代码使用， 方法1：将一个对象的引用保存到一个公有的静态变量中； 方法2：发布某个对象时会间接发布其他对象； 方法3：发布一个对象时，该对象的非私有域中引用的所有对象都也会被发布； 方法4：发布一个内部类； 逸出：某个不该发布的对象被发布，不要在构造过程中使this引用逸出；常见的this逸出，①在构造函数中启动一个线程，②在构造函数中调用一个可改写的实例方法时；使用工厂方法防止this引用在构造过程中逸出。 线程封闭：在单线程中访问数据，数据不需要同步；当被访问的数据被封闭在一个线程中，即使该对象不是线程安全的，这种用法也将实现线程安全。jdbc连接池的connection对象，每次访问的时候的线程获得一个connection对象，用完后再归还给连接池（链接池要保证线程安全），在归还之前，该对象不会分配给其他线程，这样保证了connection存在一个封闭的线程中，保证了线程安全。①ad-hoc:维护线程封闭的职责完全由程序实现②栈封闭：只能通过局部变量访问对象，将变量封闭成局部变量，由于方法在执行的时候会有自己的虚拟机栈，该栈在中的变量只有本线程能访问，所以保证了线程安全，③ThreadLocal：将变量可以声明为全局的，不同的线程set不同的值，调用get的时候只会拿到自己线程的值，不会被别的线程覆盖 不变性：不可变对象一定是线程安全的，不可变对象只有一种状态，并有构造函数来控制；满足三个条件才是不可变的：①对象创建后其状态不能修改；②对象的所有域都是final类型；③对象是正确创建的（在创建对象的时候，this引用没有逸出） final域：（反射修改final修饰的对象能否成功？）写final域规则：保证final域修饰的变量在构造函数中执行，这样保证对象被引用的时候变量不会出现未初始化的情况；这里保证的是编译器不会重排序读fianl域规则：初次读对象引用和初次读该对象包含的fina域，这两个操作禁止重排序，普通域的读操作很有可能被重排序到了写普通域之前；这里是禁止处理器重排序对引用的final对象，会保证整个引用写入和成员写入完成后添加storestore屏障，读同样如此；在x86的系统中省略了这些屏障；final 引用不能从构造函数中 逸出，否则不能保证对象构造完成，这样final 引用的变量也可能没有初始化完成。 安全发布：在静态初始化函数中初始化一个对象的引用；用 volatile ， final， 或者锁 保护对象的引用； 二 对象的组合 设计线程安全类的三要素：①找出构成对象状态的所有变量②找出约束状态变量的不变性条件③建立对象状态的并发访问的管理策略 当下一个状态需要依赖前一个状态的时候，这个操作是一个复合操作，例如：CAS 包含多个变量的不变性条件时，会产生原子性需求：这些相关的变量必需在单个原子操作中进行 后验条件：当变量的状态改变之后，需要依赖之前的某个状态值作为验证的依据，但是变量的改变是成功的； 先验条件：也称为依赖状态的操作，变量在使用之前就要先校验，否则后续的原子操作可能会发生异常（单线程中），在并并发环境下，这个先验条件可能会被其他线程修改，导致验证成功，防止这样的情况可以把整个验证和操作都封装起来，或者变成原子性操作 状态的所有权，java的垃圾回收机制使我们避免处理所有权的问题，因为新的对象创建之后，内部包含的对象的状态的所有权是属于谁？7解答 对象封装它拥有的状态，反之，对他封装的状态拥有多有权 如果对象不是线程安全的，可以有多种方式把它封装使用保证安全，例如让该对象只能有单线程访问（线程封闭在线程中吧对象传递给另一个方法，而不是共享） ，或者通过锁保护，或者栈封闭（变成局部变量）。将对象封装在另一个对象中，并采用适当的加锁策略，可以确保线程安全，例如：装饰器模式（实例封闭的一种）。 监视器模式：把所有对象的可变状态都封装起来，并使用对象的内置锁来保护，简单的一个例子，在类中有个value 属性， 把get 和set都用synchinzed修饰，使用内置锁保护，这个简单的例子就是监视器模式的简单实现；实际情况可以使用内部私有的属性作为锁，但是要注意不能把公有的get和set方法泄露出去 线程安全性的委托：将线程的安全性委托给内部状态的安全性，比如使用currentHashMap代替hashMap，使用atomic类型值等；还可以委托给多个状态变量 ，前提这几个状态变量是互相独立的。 如果某个类含有复合操作，仅依靠委托是不足以实现安全的，委托的状态间可能有关联，或者委托的状态可能被发布导致状态失效，何时能发布状态交由用户修改，取决于该状态被修改后是否影响整个程序的安全性，也就是视情况而定… 三 基础构建模块 同步容器类： 同步容器类是线程安全的，但是在某些复合操作的情况下仍然会导致线程安全问题，如：迭代，跳转，条件运算（如果没有就添加），原因是这些操作是复合操作； foreach使用的是iterator遍历：将计数器的变化容器关联，若在迭代期间计数器被修改，hasNext或next就会抛出ConcurrentModificationException，这样会对容器进行加锁； 如果不希望对容器加锁，还可以复制一份容器，这个容器被封闭在线程内部，其他线程不会修改，这样在副本上迭代就可以保证安全； 隐藏的迭代操作，标准容器的toString方法会迭代容器，所以假如在调用system.out.print的时候会隐式调用迭代，同样还有hashCode和equals，containsAll，removeAll，retainAll等方法； 并发容器： conCurrentHashMap：正常的hashMap在查找某个元素时会用到equals，导致花费时间较长，这段时间在线程同步后会导致其他线程不能访问。currentHashMap采用分段锁， 分段锁：对散列桶的每个散列元素都添加一个锁，增加了锁的数量，读写不通锁的时候可以同时进行，提高并发的效率。 CopOnWriteArrayList：用于替代同步list，在迭代期间不需要对容器进行加锁或复制。它的安全性在于只要正确的发布一个事实不可变的对象，那么在访问该对象的时候就不需要再进一步同步。且基本的add等方法也进行了加锁处理，使得写操作线程安全，读操作可以多线程同入，若迭代，会获取一份当前的数据快照，迭代是对快照进行的，数据有变化的话也不会感知。 阻塞队列：队列已满，put方法将阻塞直到有空间可用；队列为空，take将阻塞直到有元素可用。阻塞队列支持生产者-消费者模式，同时提供offer，poll方法，若数据项不能被添加到队列中/获取数据的时候队列为空，那么将返回一个失败状态。生产者-消费者可以并发的执行 串行线程封闭：线程封闭对象只能由单个线程拥有，但可以通过安全的发布该对象来转移所有权，转移后只能有新的线程来独占。要确保只有一个线程能接受被转移的可变对象。 双端队列：deque（双端队列） 实现了在队列头和队列尾的高效插入和移除。 工作密取（work stealing）：每个消费者都有自己的deque，当消费完自己的任务后可以从别的deque中获取任务，但是要从队尾获取。适用于既是生产者又是消费者。 阻塞方法：线程可能因为一些原因处于阻塞状态，被阻塞的线程必须等待某个不受它控制的时间发生后才能继续执行。 中断方法：中断是一种协作机制，一个线程不能强制停止其他正在运行的线程，中断只是要求另一个线程执行到可以暂停的地方停止正在执行的任务 同步工具类：可以是任何一个对象，只要它根据自身的状态来协调线程的控制流。阻塞队列可以视为同步工具类，其他的还包括信号量，栅栏，闭锁。他们都封装了一些状态，这些状态将决定执行同步工具类的线程是继续执行还是等待，此外还提供了一些方法对状态进行操作，以及另一些方法用于高校等待同步工具类进入到预期状态。 闭锁：可以延迟线程的进度直到到达终止状态，闭锁相当于一扇门，在闭锁的状态结束前，没有任何线程能通过这扇门，当状态结束，门打开允许所有线程通过。 futureTask：通过callable实现，可以用作闭锁， Future的get方法相当于latch的await，阻塞当前线程，直到状态结束。状态结束后将永远停止在当前状态。在executor中它是异步任务。 信号量：用来控制同时访问某个特定资源的操作数量，或者同时执行某个操作的数量，释放可以由不同的线程执行，和互斥锁不一样。 栅栏（barrier）：对当前执行的线程来说等待其他线程都达到一定状态后才继续执行。 四 任务执行 任务：抽象的，离散的工作单元。围绕任务管理应用时，首先要指明任务边界，理想情况，任务是独立的活动，它的工作不依赖其他任务状态结果或者边界效应。独立的请求作为任务边界。 顺序的执行任务：吞吐量低，当处理方法存在阻塞的时候会严重影响服务器性能，响应慢。 显示创建多线程：将处理的方法放在每个线程中执行，可以提高吞吐量，但是无限制的创建线程在维持线程生命周期有开销，消耗内存和cpu资源，线程数量要有限制。 Executor：任务是一组逻辑工作单元，线程是使任务异步执行的机制。它提供了一种标准的方法将任务的提交过程和执行过程解耦，并用runnable表示。可以为任务选择指定的执行策略。 线程池：因为线程提前创建好，可以减少每次创建线程的开销，降低任务延迟，提高响应，复用线程资源。 生命周期：如果无法正确的关闭executor jvm将无法结束。executorService接口用于管理生命周期。 timer缺陷：①执行定时任务的时候只会创建一个线程。假设某个任务执行时间过长，可能会出现丢失任务的情况（取决于是固定速率还是固定延迟来调用任务）②timer如果抛出一个非受检异常，可能会把整个timer取消，导致后续的任务无法继续执行，所以推荐使用ScheduledThreadPoolExecutor。 callable：它认为主入口点（call）将返回一个值，这个值能够被future 拿到，并可能抛出异常，一般配合ExecutorService future：表示一个任务的生命周期，提供了方法判断是否完成或者取消，以及获取任务结果和取消任务等。任务的的生命周期只能前进，也就是任务完成后就停留在完成的状态。 可以用来获取callable的结果，get()方法会阻塞。异构任务并行的局限：当两个任务的执行效率差距过大时，拆分任务为并行性能提升很低，反而使代码变得更加复杂，所以只有当大量同构任务并行处理时，才能体现将程序工作分配到多个任务带来的性能提升。 completionService：可以利用一个Executor，把每个任务执行结束后存储到blockingqueue中，调用take() 将返回future，目的是为了让串行的执行task变成并行的执行，提高效率。 invokeAll：可以一次唤醒多个future，并可以设置等待的时间，超过将抛出CancellationException异常，此时可以执行取消或者其他操作。 五 取消与关闭 java没有提供任何机制来安全地终止线程，但提供了中断，这是一种协作机制，能使一个线程终止另一个线程的当前工作。 任务取消：如果外部代码能在某个操作正常完成之前将其置为完成状态，那么这个操作就是可以取消的（cancellable），这个操作不需要有取消的策略 中断：当采用设置标志位进行中断的策略时，若中断方法运行时间过长，导致虽然把标志位置为了true，但可能永远无法检测到，因为之前的方法阻塞住了，这样无法中断。对于中断的正确理解是：它并不会真正的中断一个正在运行的线程，而只是发出中断请求，然后由线程在下一个合适的时候中断自己。 阻塞库方法。例如：sleep和wait 会检查线程何时中断，并且在发现中断时提前返回，它们响应中断操作包括，清除中断状态，抛出InterruptException。通常，中断是实现取消的最合理的方式。 中断策略：最合理的中断策略是某种形式的线程级取消操作或服务级取消操作；尽快退出，在必要时进行清理，通知某个所有者线程已经退出。任务不会在其自己拥有的线程中执行，而是在某个服务拥有的线程中执行。 响应中断：①传递异常，例如使用throws抛出，②恢复中断状态，使上层调用栈进行处理。只有实现了线程中断策略的代码才能屏蔽中断请求。在中断线程之前，应该先了解它的中断策略。 示例的计时运行：首先是一个反例，由于不知道代用timedRun的线程的中断策略，导致若中断发生在任务正常执行完之后，会执行什么代码我们也不知道；而改进的任务自己启动一个线程执行任务，并设置了中断策略，timedRun任务执行时会调用限时的join，目的是等待任务的执行，防止检测不到异常，待join返回后会检查异常， 若有则抛出。 future取消：Future 拥有一个cancel 方法，该方法带有一个 boolean 类型的参数 mayinterruptIfRunning，表示取消操作是否成功。（这只是表示任务是否能接受中断，而不是表示任务是否能检测并处理中断。） 处理不可中断的阻塞：采用newTaskFork封装非标准取消。 停止基于线程的服务：线程的对象是Thread，其所有者是创建该线程的类。应该有线程的所有者来操作线程，所以要用线程池来中断线程，线程的所有权不能传递。对于持有线程的服务，只要服务的存在时间大于创建现成的方法的存在时间，那么就应该提供生命周期方法 六 线程池的使用： Executor框架可以将任务的提交和执行解耦，但存在一些任务需要明确的制定执行策略： ①依赖性任务：任务需要依赖线程池中的其他任务，所以执行策略会受到限制。 ②使用线程封闭机制的任务单线程的executor能确保任务不会并发执行。 ③对响应时间敏感的任务。 ④使用threadLocal的任务：只有线程本地的生命周期受限于任务的生命周期时，在线程池中使用ThreadLocal才有意义，在线程池中不应该使用ThreadLocal进行值传递。只有当任务都是同类型的并且互相独立时，线程池的性能才能达到最佳。 线程饥饿死锁：在单线程的executor中，如果一个任务将另一个任务提交到同一个Executor中，并且等待这个任务的提交结果，那么通常将产生死锁。 运行时间较长的任务：如果任务阻塞时间过长，会影响线程池的性能。限定任务等待资源的时间可以缓解该问题。 设置线程池的大小：n(thread) =n(cpu) * u(cpu) *(1+ W/C) 管理任务队列：通过Runnable和一个链表节点表现等待中的任务，基本任务队列有3种： ①无界队列：newFixedThreadPool 和 newSingleThreadExecutor 默认使用无界LinkedBlockingQueue，当任务过多时，队列会无限增长。 ②有界队列：配合饱和策略，队列的大小要和线程池的大小一起调整。 ③同步移交（Synchronous Handoff）：对非常大或者无界的线程池，使用此机制避免排队。 七 避免活跃性危险 死锁：当线程A持有资源L，同时想要获取资源M；线程B持有资源M，同时想获取资源L，这种情况会产生死锁。数据库系统中，两个事务之间可能发生死锁，系统会 选择一个牺牲者并放弃这个事务，释放资源。JVM当一组线程发生死锁的时候，这些线程将不能使用，恢复方法是终止程序并重启。死锁发生并不是必然的，一般发生在高负载的情况下。 锁顺序死锁：两个线程试图以不通的顺序获取相同的锁（多个锁）。如果所有线程都以固定的顺序获取锁，在程序中将不会出现锁顺序死锁。 动态的锁顺序死锁：代码层一个方法中嵌套多个锁，看似外部调用的时候是相同的顺序，但是在方法参数的传递上可能存在想法的顺序，导致锁顺序死锁的发生。所以要制定锁顺序，可以使用System.identityHashCode，返回Object.HashCode值。 在协作对象之间发生死锁：隐式的会发生锁顺序死锁。如果在持有锁的情况下调用某个外部方法，要小心死锁。 资源死锁：线程饥饿死锁；当资源池的资源过少，二一个任务需要两个资源池中的资源，相互等待的时候。 死锁的避免和诊断：两阶段策略检查死锁：①首先找出什么地方获取多个锁，②对所有这些实例进行全局分析","categories":[{"name":"tech","slug":"tech","permalink":"http://rayl0726.github.io/categories/tech/"}],"tags":[{"name":"java","slug":"java","permalink":"http://rayl0726.github.io/tags/java/"},{"name":"concurrent","slug":"concurrent","permalink":"http://rayl0726.github.io/tags/concurrent/"}]}],"categories":[{"name":"tech","slug":"tech","permalink":"http://rayl0726.github.io/categories/tech/"}],"tags":[{"name":"java","slug":"java","permalink":"http://rayl0726.github.io/tags/java/"},{"name":"concurrent","slug":"concurrent","permalink":"http://rayl0726.github.io/tags/concurrent/"}]}